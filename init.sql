-- 'I': INSERT
-- 'U': UPDATE
-- 'D': DELETE
CREATE TYPE log_event AS ENUM ('I', 'U', 'D');

CREATE TABLE log (
    id          INT         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name  VARCHAR     NOT NULL,
    event       log_event   NOT NULL,
    key         VARCHAR     NOT NULL,
    created_at  TIMESTAMP   NOT NULL DEFAULT current_timestamp
);

CREATE TABLE log_detail (
    id      INT     NOT NULL REFERENCES log (id) ON DELETE CASCADE,
    field   VARCHAR NOT NULL,
    value   VARCHAR,
    PRIMARY KEY (id, field)
);

CREATE INDEX idx_log_table_name_date
ON log(table_name, created_at);

CREATE OR REPLACE FUNCTION logger()
	RETURNS TRIGGER
	LANGUAGE PLPGSQL
AS $$
DECLARE
	log_id          INTEGER;
	col_name        VARCHAR;
	new_col_value   VARCHAR;
	old_col_value   VARCHAR;
	log_event       log_event;
	log_key         VARCHAR := '';
	pk_col          VARCHAR;
	pk_value        VARCHAR;
BEGIN
	FOR pk_col IN
		SELECT column_name
		FROM information_schema.key_column_usage
		WHERE 
			table_name = TG_TABLE_NAME AND
			constraint_name = (
	    		SELECT constraint_name
	    		FROM information_schema.table_constraints
	    		WHERE
	    			table_name = TG_TABLE_NAME AND
	    			constraint_type = 'PRIMARY KEY'
	    	)
	LOOP
		IF TG_OP = 'DELETE' THEN
			EXECUTE format('SELECT $1.%I', pk_col) INTO pk_value USING OLD;
		ELSE
			EXECUTE format('SELECT $1.%I', pk_col) INTO pk_value USING NEW;
		END IF;
	
		IF LENGTH(log_key) > 0 THEN
			log_key := log_key || ' AND ' || pk_col || '="' || pk_value || '"';
		ELSE
			log_key := log_key || pk_col || '="' || pk_value || '"';
		END IF;
	END LOOP;
	
	IF TG_OP = 'DELETE' THEN
		INSERT INTO log(table_name, event, key)
		VALUES (TG_TABLE_NAME, 'D', log_key);
	
		RETURN NEW;
	END IF;
	
	
	CASE TG_OP
		WHEN 'INSERT' THEN log_event := 'I';
		WHEN 'UPDATE' THEN log_event := 'U';
	END CASE;
	
	INSERT INTO log(table_name, event, key)
	VALUES (TG_TABLE_NAME, log_event, log_key)
	RETURNING id INTO log_id;
	
	FOR col_name IN 
		SELECT column_name
		FROM information_schema.columns
		WHERE 
			table_schema = TG_TABLE_SCHEMA AND
			table_name = TG_TABLE_NAME
	LOOP
		EXECUTE format('SELECT $1.%I', col_name) INTO old_col_value USING OLD;
		EXECUTE format('SELECT $1.%I', col_name) INTO new_col_value USING NEW;
	
		IF TG_OP = 'INSERT' THEN
			INSERT INTO log_detail(id, field, value)
			VALUES (log_id, col_name, new_col_value);
		END IF;
	
		IF TG_OP = 'UPDATE' THEN
			IF new_col_value <> old_col_value OR new_col_value IS NULL THEN
				INSERT INTO log_detail(id, field, value)
				VALUES (log_id, col_name, new_col_value);
			END IF;
		END IF;
	END LOOP;

	RETURN NEW;
END;
$$

CREATE VIEW logs AS
SELECT
	log.id,
	log.table_name,
	log.event,
	log.key,
	log.created_at,
	log_detail.field,
	log_detail.value
FROM log
LEFT JOIN log_detail
	ON log.id = log_detail.id
ORDER BY log.id;